/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.3
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum MSGID {
    MSGBOX = 0,
    PLAYERINFO = 1,
    PLAYERINFOLIST = 2,
    INITLIST = 3,
    NEWSESSION = 4,
    STARTFIRE = 5,
    STOPFIRE = 6
}
export class MsgBox extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        context?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("context" in data && data.context != undefined) {
                this.context = data.context;
            }
        }
    }
    get context() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set context(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        context?: string;
    }): MsgBox {
        const message = new MsgBox({});
        if (data.context != null) {
            message.context = data.context;
        }
        return message;
    }
    toObject() {
        const data: {
            context?: string;
        } = {};
        if (this.context != null) {
            data.context = this.context;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.context.length)
            writer.writeString(1, this.context);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgBox {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBox();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.context = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MsgBox {
        return MsgBox.deserialize(bytes);
    }
}
export class PlayerInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uuid?: string;
        pos?: Vector3;
        rot?: Vector2;
        isGround?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uuid" in data && data.uuid != undefined) {
                this.uuid = data.uuid;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("rot" in data && data.rot != undefined) {
                this.rot = data.rot;
            }
            if ("isGround" in data && data.isGround != undefined) {
                this.isGround = data.isGround;
            }
        }
    }
    get uuid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uuid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, Vector3, 2) as Vector3;
    }
    set pos(value: Vector3) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get rot() {
        return pb_1.Message.getWrapperField(this, Vector2, 3) as Vector2;
    }
    set rot(value: Vector2) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_rot() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get isGround() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set isGround(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        uuid?: string;
        pos?: ReturnType<typeof Vector3.prototype.toObject>;
        rot?: ReturnType<typeof Vector2.prototype.toObject>;
        isGround?: boolean;
    }): PlayerInfo {
        const message = new PlayerInfo({});
        if (data.uuid != null) {
            message.uuid = data.uuid;
        }
        if (data.pos != null) {
            message.pos = Vector3.fromObject(data.pos);
        }
        if (data.rot != null) {
            message.rot = Vector2.fromObject(data.rot);
        }
        if (data.isGround != null) {
            message.isGround = data.isGround;
        }
        return message;
    }
    toObject() {
        const data: {
            uuid?: string;
            pos?: ReturnType<typeof Vector3.prototype.toObject>;
            rot?: ReturnType<typeof Vector2.prototype.toObject>;
            isGround?: boolean;
        } = {};
        if (this.uuid != null) {
            data.uuid = this.uuid;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.rot != null) {
            data.rot = this.rot.toObject();
        }
        if (this.isGround != null) {
            data.isGround = this.isGround;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uuid.length)
            writer.writeString(1, this.uuid);
        if (this.has_pos)
            writer.writeMessage(2, this.pos, () => this.pos.serialize(writer));
        if (this.has_rot)
            writer.writeMessage(3, this.rot, () => this.rot.serialize(writer));
        if (this.isGround != false)
            writer.writeBool(4, this.isGround);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uuid = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.pos, () => message.pos = Vector3.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.rot, () => message.rot = Vector2.deserialize(reader));
                    break;
                case 4:
                    message.isGround = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerInfo {
        return PlayerInfo.deserialize(bytes);
    }
}
export class PlayerInfoList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        list?: PlayerInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, PlayerInfo, 1) as PlayerInfo[];
    }
    set list(value: PlayerInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        list?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
    }): PlayerInfoList {
        const message = new PlayerInfoList({});
        if (data.list != null) {
            message.list = data.list.map(item => PlayerInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            list?: ReturnType<typeof PlayerInfo.prototype.toObject>[];
        } = {};
        if (this.list != null) {
            data.list = this.list.map((item: PlayerInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.list.length)
            writer.writeRepeatedMessage(1, this.list, (item: PlayerInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfoList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfoList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerInfo.deserialize(reader), PlayerInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerInfoList {
        return PlayerInfoList.deserialize(bytes);
    }
}
export class FireBullet extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        startPos?: Vector3;
        dir?: Vector3;
        length?: number;
        laserWidth?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("startPos" in data && data.startPos != undefined) {
                this.startPos = data.startPos;
            }
            if ("dir" in data && data.dir != undefined) {
                this.dir = data.dir;
            }
            if ("length" in data && data.length != undefined) {
                this.length = data.length;
            }
            if ("laserWidth" in data && data.laserWidth != undefined) {
                this.laserWidth = data.laserWidth;
            }
        }
    }
    get startPos() {
        return pb_1.Message.getWrapperField(this, Vector3, 1) as Vector3;
    }
    set startPos(value: Vector3) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_startPos() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get dir() {
        return pb_1.Message.getWrapperField(this, Vector3, 2) as Vector3;
    }
    set dir(value: Vector3) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_dir() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get length() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set length(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get laserWidth() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set laserWidth(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        startPos?: ReturnType<typeof Vector3.prototype.toObject>;
        dir?: ReturnType<typeof Vector3.prototype.toObject>;
        length?: number;
        laserWidth?: number;
    }): FireBullet {
        const message = new FireBullet({});
        if (data.startPos != null) {
            message.startPos = Vector3.fromObject(data.startPos);
        }
        if (data.dir != null) {
            message.dir = Vector3.fromObject(data.dir);
        }
        if (data.length != null) {
            message.length = data.length;
        }
        if (data.laserWidth != null) {
            message.laserWidth = data.laserWidth;
        }
        return message;
    }
    toObject() {
        const data: {
            startPos?: ReturnType<typeof Vector3.prototype.toObject>;
            dir?: ReturnType<typeof Vector3.prototype.toObject>;
            length?: number;
            laserWidth?: number;
        } = {};
        if (this.startPos != null) {
            data.startPos = this.startPos.toObject();
        }
        if (this.dir != null) {
            data.dir = this.dir.toObject();
        }
        if (this.length != null) {
            data.length = this.length;
        }
        if (this.laserWidth != null) {
            data.laserWidth = this.laserWidth;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_startPos)
            writer.writeMessage(1, this.startPos, () => this.startPos.serialize(writer));
        if (this.has_dir)
            writer.writeMessage(2, this.dir, () => this.dir.serialize(writer));
        if (this.length != 0)
            writer.writeFloat(3, this.length);
        if (this.laserWidth != 0)
            writer.writeFloat(4, this.laserWidth);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FireBullet {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FireBullet();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.startPos, () => message.startPos = Vector3.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.dir, () => message.dir = Vector3.deserialize(reader));
                    break;
                case 3:
                    message.length = reader.readFloat();
                    break;
                case 4:
                    message.laserWidth = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FireBullet {
        return FireBullet.deserialize(bytes);
    }
}
export class UUID extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): UUID {
        const message = new UUID({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UUID {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UUID();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UUID {
        return UUID.deserialize(bytes);
    }
}
export class Vector2 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
    }): Vector2 {
        const message = new Vector2({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeFloat(1, this.x);
        if (this.y != 0)
            writer.writeFloat(2, this.y);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector2 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector2();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector2 {
        return Vector2.deserialize(bytes);
    }
}
export class Vector3 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        z?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
    }): Vector3 {
        const message = new Vector3({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.z != null) {
            message.z = data.z;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeFloat(1, this.x);
        if (this.y != 0)
            writer.writeFloat(2, this.y);
        if (this.z != 0)
            writer.writeFloat(3, this.z);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector3 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector3();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                case 3:
                    message.z = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector3 {
        return Vector3.deserialize(bytes);
    }
}
