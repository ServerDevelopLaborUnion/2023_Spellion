/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.3
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace packet {
    export enum MSGID {
        C_LOGIN_REQ = 0,
        S_LOGIN_RES = 1,
        C_REGISTER_REQ = 3,
        S_REGISTER_RES = 4,
        C_JOIN_REQ = 5,
        S_JOIN_RES = 6,
        S_JOINED = 7,
        C_READY = 8,
        C_EXIT_ROOM = 9,
        S_EXIT_MEMBER = 10,
        S_ALL_READY = 11,
        C_GAME_START = 12,
        S_GAME_START = 13,
        C_MOVE_DATA = 14,
        S_MOVE_DATA = 15
    }
    export enum GameMode {
        AllKill = 0
    }
    export enum Team {
        Red = 0,
        Blue = 1
    }
    export class C_Login_Req extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): C_Login_Req {
            const message = new C_Login_Req({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Login_Req {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Login_Req();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Login_Req {
            return C_Login_Req.deserialize(bytes);
        }
    }
    export class S_Login_Res extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            userData?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("userData" in data && data.userData != undefined) {
                    this.userData = data.userData;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get userData() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set userData(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_userData() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            success?: boolean;
            userData?: ReturnType<typeof User.prototype.toObject>;
        }): S_Login_Res {
            const message = new S_Login_Res({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.userData != null) {
                message.userData = User.fromObject(data.userData);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                userData?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.userData != null) {
                data.userData = this.userData.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.has_userData)
                writer.writeMessage(2, this.userData, () => this.userData.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Login_Res {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Login_Res();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.userData, () => message.userData = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Login_Res {
            return S_Login_Res.deserialize(bytes);
        }
    }
    export class C_Register_Req extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): C_Register_Req {
            const message = new C_Register_Req({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Register_Req {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Register_Req();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Register_Req {
            return C_Register_Req.deserialize(bytes);
        }
    }
    export class S_Register_Res extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            userData?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("userData" in data && data.userData != undefined) {
                    this.userData = data.userData;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get userData() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set userData(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_userData() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            success?: boolean;
            userData?: ReturnType<typeof User.prototype.toObject>;
        }): S_Register_Res {
            const message = new S_Register_Res({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.userData != null) {
                message.userData = User.fromObject(data.userData);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                userData?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.userData != null) {
                data.userData = this.userData.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.has_userData)
                writer.writeMessage(2, this.userData, () => this.userData.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Register_Res {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Register_Res();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.userData, () => message.userData = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Register_Res {
            return S_Register_Res.deserialize(bytes);
        }
    }
    export class C_Join_Req extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mode?: GameMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, GameMode.AllKill) as GameMode;
        }
        set mode(value: GameMode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            mode?: GameMode;
        }): C_Join_Req {
            const message = new C_Join_Req({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: GameMode;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mode != GameMode.AllKill)
                writer.writeEnum(1, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Join_Req {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Join_Req();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Join_Req {
            return C_Join_Req.deserialize(bytes);
        }
    }
    export class S_Join_Res extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            isOwner?: boolean;
            index?: number;
            members?: RoomMember[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("isOwner" in data && data.isOwner != undefined) {
                    this.isOwner = data.isOwner;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get isOwner() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set isOwner(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, RoomMember, 4) as RoomMember[];
        }
        set members(value: RoomMember[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            success?: boolean;
            isOwner?: boolean;
            index?: number;
            members?: ReturnType<typeof RoomMember.prototype.toObject>[];
        }): S_Join_Res {
            const message = new S_Join_Res({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.isOwner != null) {
                message.isOwner = data.isOwner;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.members != null) {
                message.members = data.members.map(item => RoomMember.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                isOwner?: boolean;
                index?: number;
                members?: ReturnType<typeof RoomMember.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.isOwner != null) {
                data.isOwner = this.isOwner;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.members != null) {
                data.members = this.members.map((item: RoomMember) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.isOwner != false)
                writer.writeBool(2, this.isOwner);
            if (this.index != 0)
                writer.writeInt32(3, this.index);
            if (this.members.length)
                writer.writeRepeatedMessage(4, this.members, (item: RoomMember) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Join_Res {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Join_Res();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.isOwner = reader.readBool();
                        break;
                    case 3:
                        message.index = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RoomMember.deserialize(reader), RoomMember));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Join_Res {
            return S_Join_Res.deserialize(bytes);
        }
    }
    export class S_Joined extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member?: RoomMember;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member" in data && data.member != undefined) {
                    this.member = data.member;
                }
            }
        }
        get member() {
            return pb_1.Message.getWrapperField(this, RoomMember, 1) as RoomMember;
        }
        set member(value: RoomMember) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_member() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            member?: ReturnType<typeof RoomMember.prototype.toObject>;
        }): S_Joined {
            const message = new S_Joined({});
            if (data.member != null) {
                message.member = RoomMember.fromObject(data.member);
            }
            return message;
        }
        toObject() {
            const data: {
                member?: ReturnType<typeof RoomMember.prototype.toObject>;
            } = {};
            if (this.member != null) {
                data.member = this.member.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_member)
                writer.writeMessage(1, this.member, () => this.member.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Joined {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Joined();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.member, () => message.member = RoomMember.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Joined {
            return S_Joined.deserialize(bytes);
        }
    }
    export class C_Ready extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Ready {
            const message = new C_Ready({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Ready {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Ready();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Ready {
            return C_Ready.deserialize(bytes);
        }
    }
    export class C_Exit_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Exit_Room {
            const message = new C_Exit_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Exit_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Exit_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Exit_Room {
            return C_Exit_Room.deserialize(bytes);
        }
    }
    export class S_Exit_Member extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            fixedMembers?: RoomMember[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("fixedMembers" in data && data.fixedMembers != undefined) {
                    this.fixedMembers = data.fixedMembers;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fixedMembers() {
            return pb_1.Message.getRepeatedWrapperField(this, RoomMember, 2) as RoomMember[];
        }
        set fixedMembers(value: RoomMember[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            fixedMembers?: ReturnType<typeof RoomMember.prototype.toObject>[];
        }): S_Exit_Member {
            const message = new S_Exit_Member({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.fixedMembers != null) {
                message.fixedMembers = data.fixedMembers.map(item => RoomMember.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                fixedMembers?: ReturnType<typeof RoomMember.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.fixedMembers != null) {
                data.fixedMembers = this.fixedMembers.map((item: RoomMember) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.fixedMembers.length)
                writer.writeRepeatedMessage(2, this.fixedMembers, (item: RoomMember) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Exit_Member {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Exit_Member();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.fixedMembers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RoomMember.deserialize(reader), RoomMember));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Exit_Member {
            return S_Exit_Member.deserialize(bytes);
        }
    }
    export class S_All_Ready extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_All_Ready {
            const message = new S_All_Ready({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_All_Ready {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_All_Ready();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_All_Ready {
            return S_All_Ready.deserialize(bytes);
        }
    }
    export class C_Game_Start extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Game_Start {
            const message = new C_Game_Start({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Game_Start {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Game_Start();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Game_Start {
            return C_Game_Start.deserialize(bytes);
        }
    }
    export class S_Game_Start extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pInfo?: RoomMember;
            spawnPos?: Vector3;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pInfo" in data && data.pInfo != undefined) {
                    this.pInfo = data.pInfo;
                }
                if ("spawnPos" in data && data.spawnPos != undefined) {
                    this.spawnPos = data.spawnPos;
                }
            }
        }
        get pInfo() {
            return pb_1.Message.getWrapperField(this, RoomMember, 1) as RoomMember;
        }
        set pInfo(value: RoomMember) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get spawnPos() {
            return pb_1.Message.getWrapperField(this, Vector3, 2) as Vector3;
        }
        set spawnPos(value: Vector3) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spawnPos() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            pInfo?: ReturnType<typeof RoomMember.prototype.toObject>;
            spawnPos?: ReturnType<typeof Vector3.prototype.toObject>;
        }): S_Game_Start {
            const message = new S_Game_Start({});
            if (data.pInfo != null) {
                message.pInfo = RoomMember.fromObject(data.pInfo);
            }
            if (data.spawnPos != null) {
                message.spawnPos = Vector3.fromObject(data.spawnPos);
            }
            return message;
        }
        toObject() {
            const data: {
                pInfo?: ReturnType<typeof RoomMember.prototype.toObject>;
                spawnPos?: ReturnType<typeof Vector3.prototype.toObject>;
            } = {};
            if (this.pInfo != null) {
                data.pInfo = this.pInfo.toObject();
            }
            if (this.spawnPos != null) {
                data.spawnPos = this.spawnPos.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pInfo)
                writer.writeMessage(1, this.pInfo, () => this.pInfo.serialize(writer));
            if (this.has_spawnPos)
                writer.writeMessage(2, this.spawnPos, () => this.spawnPos.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Game_Start {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Game_Start();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pInfo, () => message.pInfo = RoomMember.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.spawnPos, () => message.spawnPos = Vector3.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Game_Start {
            return S_Game_Start.deserialize(bytes);
        }
    }
    export class C_Move_Data extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pos?: Vector3;
            eulurAngle?: Vector3;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("eulurAngle" in data && data.eulurAngle != undefined) {
                    this.eulurAngle = data.eulurAngle;
                }
            }
        }
        get pos() {
            return pb_1.Message.getWrapperField(this, Vector3, 1) as Vector3;
        }
        set pos(value: Vector3) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pos() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get eulurAngle() {
            return pb_1.Message.getWrapperField(this, Vector3, 2) as Vector3;
        }
        set eulurAngle(value: Vector3) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_eulurAngle() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            pos?: ReturnType<typeof Vector3.prototype.toObject>;
            eulurAngle?: ReturnType<typeof Vector3.prototype.toObject>;
        }): C_Move_Data {
            const message = new C_Move_Data({});
            if (data.pos != null) {
                message.pos = Vector3.fromObject(data.pos);
            }
            if (data.eulurAngle != null) {
                message.eulurAngle = Vector3.fromObject(data.eulurAngle);
            }
            return message;
        }
        toObject() {
            const data: {
                pos?: ReturnType<typeof Vector3.prototype.toObject>;
                eulurAngle?: ReturnType<typeof Vector3.prototype.toObject>;
            } = {};
            if (this.pos != null) {
                data.pos = this.pos.toObject();
            }
            if (this.eulurAngle != null) {
                data.eulurAngle = this.eulurAngle.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pos)
                writer.writeMessage(1, this.pos, () => this.pos.serialize(writer));
            if (this.has_eulurAngle)
                writer.writeMessage(2, this.eulurAngle, () => this.eulurAngle.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Move_Data {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Move_Data();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pos, () => message.pos = Vector3.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.eulurAngle, () => message.eulurAngle = Vector3.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Move_Data {
            return C_Move_Data.deserialize(bytes);
        }
    }
    export class S_Move_Data extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            team?: Team;
            pos?: Vector3;
            eulerAngle?: Vector3;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("eulerAngle" in data && data.eulerAngle != undefined) {
                    this.eulerAngle = data.eulerAngle;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get team() {
            return pb_1.Message.getFieldWithDefault(this, 2, Team.Red) as Team;
        }
        set team(value: Team) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getWrapperField(this, Vector3, 3) as Vector3;
        }
        set pos(value: Vector3) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pos() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get eulerAngle() {
            return pb_1.Message.getWrapperField(this, Vector3, 4) as Vector3;
        }
        set eulerAngle(value: Vector3) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_eulerAngle() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            team?: Team;
            pos?: ReturnType<typeof Vector3.prototype.toObject>;
            eulerAngle?: ReturnType<typeof Vector3.prototype.toObject>;
        }): S_Move_Data {
            const message = new S_Move_Data({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.team != null) {
                message.team = data.team;
            }
            if (data.pos != null) {
                message.pos = Vector3.fromObject(data.pos);
            }
            if (data.eulerAngle != null) {
                message.eulerAngle = Vector3.fromObject(data.eulerAngle);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                team?: Team;
                pos?: ReturnType<typeof Vector3.prototype.toObject>;
                eulerAngle?: ReturnType<typeof Vector3.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.team != null) {
                data.team = this.team;
            }
            if (this.pos != null) {
                data.pos = this.pos.toObject();
            }
            if (this.eulerAngle != null) {
                data.eulerAngle = this.eulerAngle.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.team != Team.Red)
                writer.writeEnum(2, this.team);
            if (this.has_pos)
                writer.writeMessage(3, this.pos, () => this.pos.serialize(writer));
            if (this.has_eulerAngle)
                writer.writeMessage(4, this.eulerAngle, () => this.eulerAngle.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Move_Data {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Move_Data();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.team = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.pos, () => message.pos = Vector3.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.eulerAngle, () => message.eulerAngle = Vector3.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Move_Data {
            return S_Move_Data.deserialize(bytes);
        }
    }
    export class Vector2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Vector2 {
            const message = new Vector2({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector2 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector2();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vector2 {
            return Vector2.deserialize(bytes);
        }
    }
    export class Vector3 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
        }): Vector3 {
            const message = new Vector3({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (this.z != 0)
                writer.writeFloat(3, this.z);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector3 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector3();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.z = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vector3 {
            return Vector3.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            level?: number;
            money?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("money" in data && data.money != undefined) {
                    this.money = data.money;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get money() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set money(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            level?: number;
            money?: number;
        }): User {
            const message = new User({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.money != null) {
                message.money = data.money;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                level?: number;
                money?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.money != null) {
                data.money = this.money;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.level != 0)
                writer.writeInt32(2, this.level);
            if (this.money != 0)
                writer.writeInt32(3, this.money);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.level = reader.readInt32();
                        break;
                    case 3:
                        message.money = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class RoomMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            team?: Team;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get team() {
            return pb_1.Message.getFieldWithDefault(this, 2, Team.Red) as Team;
        }
        set team(value: Team) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            team?: Team;
            index?: number;
        }): RoomMember {
            const message = new RoomMember({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.team != null) {
                message.team = data.team;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                team?: Team;
                index?: number;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.team != null) {
                data.team = this.team;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.team != Team.Red)
                writer.writeEnum(2, this.team);
            if (this.index != 0)
                writer.writeInt32(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        message.team = reader.readEnum();
                        break;
                    case 3:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomMember {
            return RoomMember.deserialize(bytes);
        }
    }
}
